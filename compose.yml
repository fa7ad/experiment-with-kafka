# # With Zookeeper
  # zookeeper:
  #   image: 'bitnami/zookeeper:latest'
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  # kafka:
  #   image: 'bitnami/kafka:latest'
  #   ports:
  #     - '9092:9092'
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper
services:
  kafka:
    image: 'bitnami/kafka'
    restart: "no"
    ports:
      - '9092:9092'
    expose:
      - 9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --describe"]
      interval: 2s
      timeout: 2s
      retries: 15
  producer:
    image: golang:alpine
    ports:
      - '8080:8080'
    volumes:
      - ./producer:/app
    working_dir: /app
    environment:
      - KAFKA_PEERS=kafka:9092
    command: go run http_server.go
    depends_on:
      kafka:
        condition: service_healthy
  consumer:
    image: golang:alpine
    restart: "always"
    volumes:
      - ./consumer:/app
    working_dir: /app
    environment:
      - KAFKA_BROKER=kafka:9092
    command: go run main.go
    depends_on:
      kafka:
        condition: service_healthy

